//buildscript {
//	dependencies {
//		classpath "org.apache.avro:avro-tools:${apacheAvroVersion}"
//	}
//}

plugins {
	id 'java'
	id 'org.springframework.boot' version "${springBootVersion}"
	id 'io.spring.dependency-management' version "${springDependencyManagementVersion}"
	id 'org.graalvm.buildtools.native' version "${graalvmBuildToolsVersion}"
}

group = 'org.neb'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(javaVersion.toInteger())
		sourceCompatibility = JavaVersion.VERSION_21
		targetCompatibility = JavaVersion.VERSION_21
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	avroTools
}

repositories {
	mavenCentral()
	maven { url 'https://packages.confluent.io/maven/' }
	maven { url 'https://repo.spring.io/milestone' }
	maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	/* --------- Monitoring Dependencies --------- */
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'io.opentelemetry.instrumentation:opentelemetry-spring-boot-starter'
	implementation "io.micrometer:micrometer-tracing:${micrometerTracingVersion}" // https://mvnrepository.com/artifact/io.micrometer/micrometer-tracing
	implementation "io.micrometer:micrometer-tracing-bridge-otel:${micrometerTracingVersion}" // https://mvnrepository.com/artifact/io.micrometer/micrometer-tracing-bridge-otel
	implementation "io.opentelemetry:opentelemetry-exporter-otlp:${openTelemetryExporterVersion}" // https://mvnrepository.com/artifact/io.opentelemetry/opentelemetry-exporter-otlp

	/* --------- Spring core Dependencies --------- */
//	implementation 'org.springframework.boot:spring-boot-starter-oauth2-authorization-server'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	/* --------- Kafka Dependencies --------- */
	implementation 'org.springframework.kafka:spring-kafka'
	implementation "org.apache.avro:avro:${apacheAvroVersion}" // https://avro.apache.org
	implementation "io.confluent:kafka-avro-serializer:${confluentVersion}" // https://mvnrepository.com/artifact/io.confluent/kafka-avro-serializer
	avroTools "org.apache.avro:avro-tools:${apacheAvroVersion}"

	runtimeOnly 'com.h2database:h2'

	/* --------- Test Dependencies --------- */
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'org.springframework.kafka:spring-kafka-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
	imports {
		mavenBom("io.opentelemetry.instrumentation:opentelemetry-instrumentation-bom:${openTelemetryVersion}")
	}
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8'
}

tasks.named('test') {
	useJUnitPlatform()
}

def avroSchemasDir = file("src/main/avro")
def avroCodeGenerationDir = file("build/generated-avro")

sourceSets.main.java.srcDirs += [avroCodeGenerationDir]

tasks.register('customAvroCodeGeneration', JavaExec) {
	group = "build"
	description = "Generate Avro Java classes from .avsc schemas"
	inputs.dir(avroSchemasDir)
	outputs.dir(avroCodeGenerationDir)

	classpath = configurations.avroTools
	mainClass = "org.apache.avro.tool.Main"
	args = ['compile', 'schema', avroSchemasDir.absolutePath, avroCodeGenerationDir.absolutePath]

	logging.captureStandardOutput(LogLevel.INFO)
	logging.captureStandardError(LogLevel.ERROR)
}

tasks.withType(JavaCompile).configureEach {
	dependsOn('customAvroCodeGeneration')
}
