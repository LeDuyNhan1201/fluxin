services:
  init_certificates:
    image: alpine/openssl
    container_name: init_certificates
    networks:
      - fluxin-network
    entrypoint: /bin/sh
    command: "/usr/bin/init_certificates.sh"
    restart: no
    volumes:
      - ./scripts/helper/init_certificates.sh:/usr/bin/init_certificates.sh
      - ./kafka/keypair:/data

  # --------- Kafka Brokers ---------
  broker1:
    image: confluentinc/cp-server:${CONFLUENT_DOCKER_TAG:-latest}
    container_name: broker1
    depends_on:
      keycloak:
        condition: service_healthy
      init_certificates:
        condition: service_completed_successfully
      prometheus:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9101:9101"
      - "9095:9095"
      - "8091:8091"
      - "1234:1234"
    networks:
      - fluxin-network
    command: "bash -c 'if [ ! -f /tmp/conf/keypair.pem ]; then echo \"ERROR: Did you forget the create-certificates.sh file that came with this docker-compose.yml file?\" && exit 1 ; else /etc/confluent/docker/run ; fi'"
    healthcheck:
      test: curl -fail --silent --insecure http://broker1:8091/v1/metadata/id || exit 1
      interval: 30s
      timeout: 10s
      start_period: 30s
      retries: 3
    restart: unless-stopped
    volumes:
      - broker1-data:/var/lib/kafka/data
      - ./kafka/keypair:/tmp/conf
      - ./kafka/configs:/etc/confluent/configs
      - ./kafka/bin/confluent:/usr/bin/confluent
      - ./kafka/bin/opentelemetry-javaagent.jar:/usr/bin/otel/opentelemetry-javaagent.jar
      - ./kafka/bin/jmx_prometheus_javaagent.jar:/usr/bin/jmx/jmx_prometheus_javaagent.jar
      - ./kafka/metrics/exporter.yml:/usr/bin/jmx/exporter.yml
    environment:
      # Basic
      KAFKA_BROKER_ID: '1'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:SASL_PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,INTERNAL:SASL_PLAINTEXT,EXTERNAL:SASL_PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://broker1:29092,CONTROLLER://broker1:29093,PLAINTEXT_HOST://0.0.0.0:9092,INTERNAL://broker1:9093,EXTERNAL://broker1:9095
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker1:29092,PLAINTEXT_HOST://localhost:9092,INTERNAL://broker1:9093,EXTERNAL://broker1:9095
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker1:29093
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
      CLUSTER_ID: vHCgQyIrRHG8Jv27qI2h3Q
      KAFKA_SUPER_USERS: User:admin;User:${SUPERUSER_CLIENT_ID}

      # Logging
      KAFKA_LOG4J_ROOT_LOGLEVEL: INFO
      KAFKA_LOG4J_LOGGERS: "kafka.authorizer.logger=INFO,io.confluent.rest-utils=INFO,io.confluent.rbacapi=INFO,io.confluent.tokenapi=INFO,io.confluent.security.auth=INFO,io.confluent.security.store=INFO,io.confluent.common.security.jetty=INFO"

      # SASL
      KAFKA_SASL_ENABLED_MECHANISMS: PLAIN,OAUTHBEARER
      KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: PLAIN
      KAFKA_SASL_MECHANISM_CONTROLLER_PROTOCOL: PLAIN

      # Internal Listener
      KAFKA_LISTENER_NAME_INTERNAL_SASL_ENABLED_MECHANISMS: PLAIN
      KAFKA_LISTENER_NAME_INTERNAL_PLAIN_SASL_JAAS_CONFIG: |
        org.apache.kafka.common.security.plain.PlainLoginModule required \
        username="admin" \
        password="admin-secret" \
        user_admin="admin-secret" \
        user_mds="mds-secret";

      # Controller Listener
      KAFKA_LISTENER_NAME_CONTROLLER_PRINCIPAL_BUILDER_CLASS: io.confluent.kafka.security.authenticator.OAuthKafkaPrincipalBuilder
      KAFKA_LISTENER_NAME_CONTROLLER_SASL_ENABLED_MECHANISMS: PLAIN
      KAFKA_LISTENER_NAME_CONTROLLER_PLAIN_SASL_JAAS_CONFIG: |
        org.apache.kafka.common.security.plain.PlainLoginModule required \
        username="admin" \
        password="admin-secret" \
        user_admin="admin-secret" \
        user_mds="mds-secret";

      # External OAuth (Keycloak)
      KAFKA_LISTENER_NAME_EXTERNAL_SASL_ENABLED_MECHANISMS: OAUTHBEARER
      KAFKA_LISTENER_NAME_EXTERNAL_SASL_OAUTHBEARER_JWKS_ENDPOINT_URL: ${IDP_JWKS_ENDPOINT}
      KAFKA_LISTENER_NAME_EXTERNAL_SASL_OAUTHBEARER_EXPECTED_AUDIENCE: ${EXPECTED_AUDIENCE}
      KAFKA_LISTENER_NAME_EXTERNAL_SASL_OAUTHBEARER_SUB_CLAIM_NAME: ${SUB_CLAIM_NAME}
      KAFKA_LISTENER_NAME_EXTERNAL_PRINCIPAL_BUILDER_CLASS: io.confluent.kafka.security.authenticator.OAuthKafkaPrincipalBuilder
      KAFKA_LISTENER_NAME_EXTERNAL_OAUTHBEARER_SASL_SERVER_CALLBACK_HANDLER_CLASS: io.confluent.kafka.server.plugins.auth.token.CompositeBearerValidatorCallbackHandler
      KAFKA_LISTENER_NAME_EXTERNAL_OAUTHBEARER_SASL_JAAS_CONFIG: |
        org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \
            unsecuredLoginStringClaim_sub="thePrincipalName" \
            publicKeyPath="/tmp/conf/public.pem" \
            scope="${GROUP_CLAIM_NAME}";

      # Authorizer
      KAFKA_AUTHORIZER_CLASS_NAME: io.confluent.kafka.security.authorizer.ConfluentServerAuthorizer
      KAFKA_CONFLUENT_AUTHORIZER_ACCESS_RULE_PROVIDERS: CONFLUENT,KRAFT_ACL
      KAFKA_CONFLUENT_OAUTH_GROUPS_CLAIM_NAME: ${GROUP_CLAIM_NAME}

      # MDS (if enabled)
      KAFKA_CONFLUENT_METADATA_TOPIC_REPLICATION_FACTOR: '1'
      KAFKA_CONFLUENT_METADATA_SERVER_ENABLED: 'true'
      KAFKA_CONFLUENT_METADATA_SERVER_LISTENERS: http://0.0.0.0:8091
      KAFKA_CONFLUENT_METADATA_SERVER_ADVERTISED_LISTENERS: http://broker1:8091
      KAFKA_CONFLUENT_METADATA_SERVER_AUTHENTICATION_METHOD: BEARER
      KAFKA_CONFLUENT_METADATA_SERVER_TOKEN_KEY_PATH: /tmp/conf/keypair.pem
      KAFKA_CONFLUENT_METADATA_SERVER_OPENAPI_ENABLE: 'true'
      KAFKA_CONFLUENT_METADATA_SERVER_USER_STORE: OAUTH
      KAFKA_CONFLUENT_METADATA_SERVER_OAUTHBEARER_JWKS_ENDPOINT_URL: ${IDP_JWKS_ENDPOINT}
      KAFKA_CONFLUENT_METADATA_SERVER_OAUTHBEARER_EXPECTED_ISSUER: ${IDP_EXPECTED_ISSUER}
      KAFKA_CONFLUENT_METADATA_SERVER_OAUTHBEARER_EXPECTED_AUDIENCE: ${EXPECTED_AUDIENCE}
      KAFKA_CONFLUENT_METADATA_SERVER_OAUTHBEARER_SUB_CLAIM_NAME: ${SUB_CLAIM_NAME}
      KAFKA_CONFLUENT_METADATA_SERVER_OAUTHBEARER_GROUPS_CLAIM_NAME: ${GROUP_CLAIM_NAME}

      # EmbeddedKafkaRest: Kafka Client Configuration
      KAFKA_KAFKA_REST_BOOTSTRAP_SERVERS: SASL_PLAINTEXT://broker1:9095
      KAFKA_KAFKA_REST_CLIENT_SECURITY_PROTOCOL: SASL_PLAINTEXT
      KAFKA_KAFKA_REST_SCHEMA_REGISTRY_URL: http://schema-registry:8081

      # EmbeddedKafkaRest: HTTP Auth Configuration
      KAFKA_KAFKA_REST_KAFKA_REST_RESOURCE_EXTENSION_CLASS: io.confluent.kafkarest.security.KafkaRestSecurityResourceExtension
      KAFKA_KAFKA_REST_REST_SERVLET_INITIALIZOR_CLASSES: io.confluent.common.security.jetty.initializer.AuthenticationHandler
      KAFKA_KAFKA_REST_OAUTHBEARER_JWKS_ENDPOINT_URL: ${IDP_JWKS_ENDPOINT}
      KAFKA_KAFKA_REST_OAUTHBEARER_EXPECTED_ISSUER: ${IDP_EXPECTED_ISSUER}
      KAFKA_KAFKA_REST_OAUTHBEARER_EXPECTED_AUDIENCE: ${EXPECTED_AUDIENCE}
      KAFKA_KAFKA_REST_OAUTHBEARER_SUB_CLAIM_NAME: ${SUB_CLAIM_NAME}
      KAFKA_KAFKA_REST_OAUTHBEARER_GROUPS_CLAIM_NAME: ${GROUP_CLAIM_NAME}
      KAFKA_KAFKA_REST_PUBLIC_KEY_PATH: /tmp/conf/public.pem

      # EmbeddedKafkaRest: MDS Client configuration
      KAFKA_KAFKA_REST_CONFLUENT_METADATA_BOOTSTRAP_SERVER_URLS: http://broker1:8091
      KAFKA_KAFKA_REST_CONFLUENT_METADATA_HTTP_AUTH_CREDENTIALS_PROVIDER: OAUTHBEARER
      KAFKA_KAFKA_REST_CONFLUENT_METADATA_OAUTHBEARER_TOKEN_ENDPOINT_URL: ${IDP_TOKEN_ENDPOINT}
      KAFKA_KAFKA_REST_CONFLUENT_METADATA_OAUTHBEARER_LOGIN_CLIENT_ID: ${RP_CLIENT_ID}
      KAFKA_KAFKA_REST_CONFLUENT_METADATA_OAUTHBEARER_LOGIN_CLIENT_SECRET: ${RP_CLIENT_SECRET}
      KAFKA_KAFKA_REST_CONFLUENT_METADATA_SERVER_URLS_MAX_AGE_MS: 60000
      KAFKA_KAFKA_REST_CLIENT_CONFLUENT_METADATA_SERVER_URLS_MAX_AGE_MS: 60000

      # Enable SSO for Control Center
      KAFKA_CONFLUENT_METADATA_SERVER_SSO_MODE: oidc
      KAFKA_CONFLUENT_OIDC_IDP_ISSUER: ${IDP_EXPECTED_ISSUER}
      KAFKA_CONFLUENT_OIDC_IDP_JWKS_ENDPOINT_URI: ${IDP_JWKS_ENDPOINT}
      KAFKA_CONFLUENT_OIDC_IDP_AUTHORIZE_BASE_ENDPOINT_URI: ${IDP_AUTH_ENDPOINT}
      KAFKA_CONFLUENT_OIDC_IDP_TOKEN_BASE_ENDPOINT_URI: ${IDP_TOKEN_ENDPOINT}
      KAFKA_CONFLUENT_OIDC_IDP_CLIENT_ID: ${SSO_CLIENT_ID}
      KAFKA_CONFLUENT_OIDC_IDP_CLIENT_SECRET: ${SSO_CLIENT_SECRET}
      KAFKA_CONFLUENT_OIDC_IDP_DEVICE_AUTHORIZATION_ENDPOINT_URI: ${IDP_DEVICE_AUTH_ENDPOINT}
      KAFKA_CONFLUENT_OIDC_IDP_SUB_CLAIM_NAME: ${SUB_CLAIM_NAME}
      KAFKA_CONFLUENT_OIDC_IDP_GROUPS_CLAIM_NAME: ${GROUP_CLAIM_NAME}
      KAFKA_CONFLUENT_OIDC_IDP_REFRESH_TOKEN_ENABLED: 'true'

      # Other
      KAFKA_AUTO_CREATE_TOPICS_ENABLED: 'true'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: '1'
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: '1'
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: '1'
      KAFKA_LOG_RETENTION_HOURS: '1'
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: '1'
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: '1'
      KAFKA_CONFLUENT_CLUSTER_LINK_METADATA_TOPIC_REPLICATION_FACTOR: '1'
      KAFKA_CONFLUENT_BALANCER_ENABLED: 'false'
      KAFKA_CONFLUENT_TELEMETRY_ENABLED: 'false'
      KAFKA_CONFLUENT_REPORTERS_TELEMETRY_AUTO_ENABLED: 'false'
#      KAFKA_CONFLUENT_REPORTERS_ENABLE: 'false'
#      KAFKA_CONFLUENT_METRICS_ENABLE: 'false'
#      KAFKA_CONFLUENT_SUPPORT_METRICS_ENABLE: 'false'
      KAFKA_CONFLUENT_SECURITY_EVENT_LOGGER_AUTHENTICATION_ENABLE: 'true'

      # OpenTelemetry configuration
      OTEL_COLLECTOR_HOST: otel-collector
      OTEL_COLLECTOR_PORT_GRPC: 4317
      OTEL_COLLECTOR_PORT_HTTP: 4318
      OTEL_JAVA_AGENT_ENABLED: 'true'
      OTEL_JAVA_AGENT_LOGGING: "application"
      OTEL_JAVA_AGENT_DEBUG: "false"
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
      OTEL_EXPORTER_OTLP_PROTOCOL: grpc
      OTEL_LOGS_EXPORTER: otlp
      OTEL_TRACES_EXPORTER: otlp
      OTEL_METRICS_EXPORTER: otlp
      OTEL_RESOURCE_ATTRIBUTES: service.namespace=broker1,service.instance.id=broker1
      EXTRA_ARGS: >
        -javaagent:/usr/bin/jmx/jmx_prometheus_javaagent.jar=1234:/usr/bin/jmx/exporter.yml
        -javaagent:/usr/bin/otel/opentelemetry-javaagent.jar

  init_permissions:
    # Just use the cp-server image as it has the curl command
    image: confluentinc/cp-server:${CONFLUENT_DOCKER_TAG:-latest}
    container_name: init_permissions
    depends_on:
      broker1:
        condition: service_healthy
    networks:
      - fluxin-network
    entrypoint: /bin/bash
    command: "/usr/bin/init_permissions.sh"
    restart: no
    volumes:
      - ./scripts/helper/init_permissions.sh:/usr/bin/init_permissions.sh
      - ./kafka/keypair:/data
      - ./kafka/configs:/etc/confluent/configs
    environment:
      SUPERUSER_CLIENT_ID: ${SUPERUSER_CLIENT_ID}
      SUPERUSER_CLIENT_SECRET: ${SUPERUSER_CLIENT_SECRET}
      SSO_SUPER_USER_GROUP: ${SSO_SUPER_USER_GROUP}
      SR_CLIENT_ID: ${SR_CLIENT_ID}
      CONNECT_CLIENT_ID: ${CONNECT_CLIENT_ID}
      CONNECT_SECRET_PROTECTION_CLIENT_ID: ${CONNECT_SECRET_PROTECTION_CLIENT_ID}
      KSQL_CLIENT_ID: ${KSQL_CLIENT_ID}
      C3_CLIENT_ID: ${C3_CLIENT_ID}
      CLIENT_APP_ID: ${CLIENT_APP_ID}
      IDP_TOKEN_ENDPOINT: ${IDP_TOKEN_ENDPOINT}

  # --------- Schema Registry ---------
  schema-registry:
    image: confluentinc/cp-schema-registry:${CONFLUENT_DOCKER_TAG:-latest}
    container_name: schema-registry
    depends_on:
      broker1:
        condition: service_healthy
      init_permissions:
        condition: service_completed_successfully
      prometheus:
        condition: service_healthy
    ports:
      - "8081:8081"
      - "1235:1235"
    networks:
      - fluxin-network
    healthcheck:
      test: >
        sh -c 'curl --silent --insecure -o /dev/null -w "%{http_code}" http://localhost:8081/subject | grep -E "^(200|401)$" > /dev/null'
      start_period: 10s
      interval: 10s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    volumes:
      - ./kafka/keypair:/tmp/conf
      - ./kafka/bin/confluent:/usr/bin/confluent
      - ./kafka/configs:/etc/confluent/configs
      - ./kafka/bin/opentelemetry-javaagent.jar:/usr/bin/otel/opentelemetry-javaagent.jar
      - ./kafka/bin/jmx_prometheus_javaagent.jar:/usr/bin/jmx/jmx_prometheus_javaagent.jar
      - ./kafka/metrics/exporter.yml:/usr/bin/jmx/exporter.yml
    environment:
      SCHEMA_REGISTRY_CLUSTER_ID: "fluxin-schema-registry-cluster"
      SCHEMA_REGISTRY_GROUP_ID: "schema-registry-group"
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker1:9095'

      SCHEMA_REGISTRY_RESOURCE.EXTENSION.CLASS: io.confluent.kafka.schemaregistry.security.SchemaRegistrySecurityResourceExtension, io.confluent.schema.exporter.SchemaExporterResourceExtension
      SCHEMA_REGISTRY_CONFLUENT.SCHEMA.REGISTRY.AUTHORIZER.CLASS: io.confluent.kafka.schemaregistry.security.authorizer.rbac.RbacAuthorizer
      SCHEMA_REGISTRY_CONFLUENT.SCHEMA.REGISTRY.AUTH.MECHANISM: JETTY_AUTH
      SCHEMA_REGISTRY_PUBLIC_KEY_PATH: /tmp/conf/public.pem

      SCHEMA_REGISTRY_KAFKASTORE_SECURITY_PROTOCOL: SASL_PLAINTEXT
      SCHEMA_REGISTRY_KAFKASTORE_SASL_MECHANISM: 'OAUTHBEARER'
      SCHEMA_REGISTRY_KAFKASTORE_SASL_LOGIN_CALLBACK_HANDLER_CLASS: 'org.apache.kafka.common.security.oauthbearer.secured.OAuthBearerLoginCallbackHandler'
      SCHEMA_REGISTRY_KAFKASTORE_SASL_OAUTHBEARER_TOKEN_ENDPOINT_URL: ${IDP_TOKEN_ENDPOINT}
      SCHEMA_REGISTRY_KAFKASTORE_SASL_JAAS_CONFIG: |
        org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \
        clientId="${SR_CLIENT_ID}" \
        clientSecret="${SR_CLIENT_SECRET}";

      SCHEMA_REGISTRY_KAFKASTORE_UPDATE_HANDLERS: 'io.confluent.schema.exporter.storage.SchemaExporterUpdateHandler'
      SCHEMA_REGISTRY_PASSWORD_ENCODER_SECRET: random

      SCHEMA_REGISTRY_REST_SERVLET_INITIALIZOR_CLASSES: io.confluent.common.security.jetty.initializer.AuthenticationHandler
      SCHEMA_REGISTRY_OAUTHBEARER_JWKS_ENDPOINT_URL: ${IDP_JWKS_ENDPOINT}
      SCHEMA_REGISTRY_OAUTHBEARER_EXPECTED_ISSUER: ${IDP_EXPECTED_ISSUER}
      SCHEMA_REGISTRY_OAUTHBEARER_EXPECTED_AUDIENCE: ${EXPECTED_AUDIENCE}
      SCHEMA_REGISTRY_OAUTHBEARER_SUB_CLAIM_NAME: ${SUB_CLAIM_NAME}
      SCHEMA_REGISTRY_OAUTHBEARER_GROUPS_CLAIM_NAME: ${GROUP_CLAIM_NAME}

      SCHEMA_REGISTRY_CONFLUENT_METADATA_BOOTSTRAP_SERVER_URLS: http://broker1:8091
      SCHEMA_REGISTRY_CONFLUENT_METADATA_HTTP_AUTH_CREDENTIALS_PROVIDER: OAUTHBEARER
      SCHEMA_REGISTRY_CONFLUENT_METADATA_OAUTHBEARER_TOKEN_ENDPOINT_URL: ${IDP_TOKEN_ENDPOINT}
      SCHEMA_REGISTRY_CONFLUENT_METADATA_OAUTHBEARER_LOGIN_CLIENT_ID: ${SR_CLIENT_ID}
      SCHEMA_REGISTRY_CONFLUENT_METADATA_OAUTHBEARER_LOGIN_CLIENT_SECRET: ${SR_CLIENT_SECRET}

      SCHEMA_REGISTRY_REST_AUTH_JMX_ENABLED: 'true'

      # OpenTelemetry configuration
      OTEL_COLLECTOR_HOST: otel-collector
      OTEL_COLLECTOR_PORT_GRPC: 4317
      OTEL_COLLECTOR_PORT_HTTP: 4318
      OTEL_JAVA_AGENT_ENABLED: 'true'
      OTEL_JAVA_AGENT_LOGGING: "application"
      OTEL_JAVA_AGENT_DEBUG: "false"
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
      OTEL_EXPORTER_OTLP_PROTOCOL: grpc
      OTEL_LOGS_EXPORTER: otlp
      OTEL_TRACES_EXPORTER: otlp
      OTEL_METRICS_EXPORTER: otlp
      OTEL_RESOURCE_ATTRIBUTES: service.namespace=schema-registry,service.instance.id=schema-registry
      EXTRA_ARGS: >
        -javaagent:/usr/bin/jmx/jmx_prometheus_javaagent.jar=1235:/usr/bin/jmx/exporter.yml
        -javaagent:/usr/bin/otel/opentelemetry-javaagent.jar

  # --------- Kafka Connect ---------
  connect:
    build:
      context: ./kafka/connect
      args:
        CONFLUENT_DOCKER_TAG: ${CONFLUENT_DOCKER_TAG:-latest}
    container_name: connect
    hostname: connect
    depends_on:
      broker1:
        condition: service_healthy
      init_permissions:
        condition: service_completed_successfully
      prometheus:
        condition: service_healthy
    ports:
      - "8083:8083"
      - "1236:1236"
    networks:
      - fluxin-network
    healthcheck:
      test: >
        sh -c 'curl --silent --insecure -o /dev/null -w "%{http_code}" http://connect:8083/ | grep -E "^(200|401)$" > /dev/null'
      start_period: 10s
      interval: 10s
      timeout: 20s
      retries: 3
    restart: unless-stopped
    volumes:
      - ./kafka/keypair:/tmp/conf
      - ./kafka/bin/confluent:/usr/bin/confluent
      - ./kafka/configs:/etc/confluent/configs
      - ./kafka/bin/opentelemetry-javaagent.jar:/usr/bin/otel/opentelemetry-javaagent.jar
      - ./kafka/bin/jmx_prometheus_javaagent.jar:/usr/bin/jmx/jmx_prometheus_javaagent.jar
      - ./kafka/metrics/exporter.yml:/usr/bin/jmx/exporter.yml
    environment:
      CONNECT_CLUSTER_ID: "fluxin-connect-cluster"
      CONNECT_GROUP_ID: "connect-group"
      CONNECT_PRODUCER_CLIENT_ID: "fluxin-connect-worker-producer"
      CONNECT_BOOTSTRAP_SERVERS: broker1:9095
      CONNECT_LISTENERS: http://0.0.0.0:8083

      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.storage.StringConverter"
      CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.storage.StringConverter"

      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_PUBLIC_KEY_PATH: /tmp/conf/public.pem
      CONNECT_LOG4J_ROOT_LOGLEVEL: INFO
      CONNECT_SECURITY_PROTOCOL: SASL_PLAINTEXT

      CONNECT_SASL_MECHANISM: 'OAUTHBEARER'
      CONNECT_SASL_LOGIN_CALLBACK_HANDLER_CLASS: 'org.apache.kafka.common.security.oauthbearer.secured.OAuthBearerLoginCallbackHandler'
      CONNECT_SASL_OAUTHBEARER_TOKEN_ENDPOINT_URL: ${IDP_TOKEN_ENDPOINT}
      CONNECT_SASL_JAAS_CONFIG: |
        org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \
        clientId="${CONNECT_CLIENT_ID}" \
        clientSecret="${CONNECT_CLIENT_SECRET}";

      CONNECT_PRODUCER_SASL_MECHANISM: 'OAUTHBEARER'
      CONNECT_PRODUCER_SECURITY_PROTOCOL: SASL_PLAINTEXT
      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      CONNECT_PRODUCER_CONFLUENT_MONITORING_INTERCEPTOR_SECURITY_PROTOCOL: SASL_PLAINTEXT
      CONNECT_PRODUCER_SASL_LOGIN_CALLBACK_HANDLER_CLASS: 'org.apache.kafka.common.security.oauthbearer.secured.OAuthBearerLoginCallbackHandler'
      CONNECT_PRODUCER_CONFLUENT_MONITORING_INTERCEPTOR_SASL_MECHANISM: 'OAUTHBEARER'
      CONNECT_PRODUCER_CONFLUENT_MONITORING_INTERCEPTOR_SASL_LOGIN_CALLBACK_HANDLER_CLASS: 'org.apache.kafka.common.security.oauthbearer.secured.OAuthBearerLoginCallbackHandler'
      CONNECT_PRODUCER_CONFLUENT_MONITORING_INTERCEPTOR_SASL_OAUTHBEARER_TOKEN_ENDPOINT_URL: ${IDP_TOKEN_ENDPOINT}
      CONNECT_PRODUCER_CONFLUENT_MONITORING_INTERCEPTOR_SASL_JAAS_CONFIG: |
        org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \
        clientId="${CONNECT_CLIENT_ID}" \
        clientSecret="${CONNECT_CLIENT_SECRET}";

      CONNECT_CONSUMER_SASL_MECHANISM: 'OAUTHBEARER'
      CONNECT_CONSUMER_SECURITY_PROTOCOL: SASL_PLAINTEXT
      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      CONNECT_CONSUMER_SASL_LOGIN_CALLBACK_HANDLER_CLASS: 'org.apache.kafka.common.security.oauthbearer.secured.OAuthBearerLoginCallbackHandler'
      CONNECT_CONSUMER_CONFLUENT_MONITORING_INTERCEPTOR_SASL_MECHANISM: 'OAUTHBEARER'
      CONNECT_CONSUMER_CONFLUENT_MONITORING_INTERCEPTOR_SASL_LOGIN_CALLBACK_HANDLER_CLASS: 'org.apache.kafka.common.security.oauthbearer.secured.OAuthBearerLoginCallbackHandler'
      CONNECT_CONSUMER_CONFLUENT_MONITORING_INTERCEPTOR_SASL_OAUTHBEARER_TOKEN_ENDPOINT_URL: ${IDP_TOKEN_ENDPOINT}
      CONNECT_CONSUMER_CONFLUENT_MONITORING_INTERCEPTOR_SASL_JAAS_CONFIG: |
        org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \
        clientId="${CONNECT_CLIENT_ID}" \
        clientSecret="${CONNECT_CLIENT_SECRET}";

      CONNECT_ADMIN_SECURITY_PROTOCOL: SASL_PLAINTEXT
      CONNECT_ADMIN_SASL_MECHANISM: 'OAUTHBEARER'
      CONNECT_ADMIN_SASL_LOGIN_CALLBACK_HANDLER_CLASS: 'org.apache.kafka.common.security.oauthbearer.secured.OAuthBearerLoginCallbackHandler'
      CONNECT_ADMIN_SASL_OAUTHBEARER_TOKEN_ENDPOINT_URL: ${IDP_TOKEN_ENDPOINT}
      CONNECT_ADMIN_SASL_JAAS_CONFIG: |
        org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \
        clientId="${CONNECT_CLIENT_ID}" \
        clientSecret="${CONNECT_CLIENT_SECRET}";
      CONNECT_ADMIN_SSL_TRUSTSTORE_LOCATION: /etc/kafka/secrets/kafka.connect.truststore.jks
      CONNECT_ADMIN_SSL_TRUSTSTORE_PASSWORD: confluent
      CONNECT_ADMIN_SSL_KEYSTORE_LOCATION: /etc/kafka/secrets/kafka.connect.keystore.jks
      CONNECT_ADMIN_SSL_KEYSTORE_PASSWORD: confluent
      CONNECT_ADMIN_SSL_KEY_PASSWORD: confluent

      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_REST_EXTENSION_CLASSES: io.confluent.connect.security.ConnectSecurityExtension, io.confluent.connect.secretregistry.ConnectSecretRegistryExtension
      CONNECT_REST_SERVLET_INITIALIZOR_CLASSES: io.confluent.common.security.jetty.initializer.AuthenticationHandler
      CONNECT_REST_AUTH_JMX_ENABLED: 'true'

      CONNECT_OAUTHBEARER_JWKS_ENDPOINT_URL: ${IDP_JWKS_ENDPOINT}
      CONNECT_OAUTHBEARER_EXPECTED_ISSUER: ${IDP_EXPECTED_ISSUER}
      CONNECT_OAUTHBEARER_EXPECTED_AUDIENCE: ${EXPECTED_AUDIENCE}
      CONNECT_OAUTHBEARER_SUB_CLAIM_NAME: ${SUB_CLAIM_NAME}
      CONNECT_OAUTHBEARER_GROUPS_CLAIM_NAME: ${GROUP_CLAIM_NAME}

      CONNECT_CONFLUENT_METADATA_BOOTSTRAP_SERVER_URLS: http://broker1:8091
      CONNECT_CONFLUENT_METADATA_HTTP_AUTH_CREDENTIALS_PROVIDER: OAUTHBEARER
      CONNECT_CONFLUENT_METADATA_OAUTHBEARER_TOKEN_ENDPOINT_URL: ${IDP_TOKEN_ENDPOINT}
      CONNECT_CONFLUENT_METADATA_OAUTHBEARER_LOGIN_CLIENT_ID: ${CONNECT_CLIENT_ID}
      CONNECT_CONFLUENT_METADATA_OAUTHBEARER_LOGIN_CLIENT_SECRET: ${CONNECT_CLIENT_SECRET}

      CONNECT_CONNECTOR_CLIENT_CONFIG_OVERRIDE_POLICY: 'All'
      CONNECT_CONFIG_PROVIDERS: 'secret'
      CONNECT_CONFIG_PROVIDERS_SECRET_CLASS: 'io.confluent.connect.secretregistry.rbac.config.provider.InternalSecretConfigProvider'
      CONNECT_CONFIG_PROVIDERS_SECRET_PARAM_MASTER_ENCRYPTION_KEY: 'password1234'
      CONNECT_CONFIG_PROVIDERS_SECRET_PARAM_KAFKASTORE_BOOTSTRAP_SERVERS: broker1:9095
      CONNECT_CONFIG_PROVIDERS_SECRET_PARAM_KAFKASTORE_TOPIC_REPLICATION_FACTOR: 1
      CONNECT_CONFIG_PROVIDERS_SECRET_PARAM_KAFKASTORE_SECURITY_PROTOCOL: SASL_PLAINTEXT
      CONNECT_CONFIG_PROVIDERS_SECRET_PARAM_KAFKASTORE_SSL_TRUSTSTORE_LOCATION: /etc/kafka/secrets/kafka.connect.truststore.jks
      CONNECT_CONFIG_PROVIDERS_SECRET_PARAM_KAFKASTORE_SSL_TRUSTSTORE_PASSWORD: confluent
      CONNECT_CONFIG_PROVIDERS_SECRET_PARAM_KAFKASTORE_SSL_KEYSTORE_LOCATION: /etc/kafka/secrets/kafka.connect.keystore.jks
      CONNECT_CONFIG_PROVIDERS_SECRET_PARAM_KAFKASTORE_SSL_KEYSTORE_PASSWORD: confluent
      CONNECT_CONFIG_PROVIDERS_SECRET_PARAM_KAFKASTORE_SSL_KEY_PASSWORD: confluent
      CONNECT_CONFIG_PROVIDERS_SECRET_PARAM_KAFKASTORE_SASL_MECHANISM: 'OAUTHBEARER'
      CONNECT_CONFIG_PROVIDERS_SECRET_PARAM_KAFKASTORE_SASL_LOGIN_CALLBACK_HANDLER_CLASS: 'org.apache.kafka.common.security.oauthbearer.secured.OAuthBearerLoginCallbackHandler'
      CONNECT_CONFIG_PROVIDERS_SECRET_PARAM_KAFKASTORE_SASL_OAUTHBEARER_TOKEN_ENDPOINT_URL: ${IDP_TOKEN_ENDPOINT}
      CONNECT_CONFIG_PROVIDERS_SECRET_PARAM_KAFKASTORE_SASL_JAAS_CONFIG: |
        org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \
        clientId="${CONNECT_CLIENT_ID}" \
        clientSecret="${CONNECT_CLIENT_SECRET}";

      CONNECT_PRODUCER_ENABLE_IDEMPOTENCE: 'true'
      CONNECT_CONFIG_STORAGE_TOPIC: connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: connect-statuses

      CONNECT_REPLICATION_FACTOR: 1
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1

      CUB_CLASSPATH: '/usr/share/java/confluent-security/connect/*:/usr/share/java/kafka/*:/usr/share/java/cp-base-new/*:/usr/share/java/confluent-secret-registry/*'
      CLASSPATH: "/usr/share/java/monitoring-interceptors/*"
      KAFKA_JVM_PERFORMANCE_OPTS: -server -XX:+UseG1GC -XX:GCTimeRatio=1
        -XX:MinHeapFreeRatio=10 -XX:MaxHeapFreeRatio=20
        -XX:MaxGCPauseMillis=10000 -XX:InitiatingHeapOccupancyPercent=35 -XX:+ExplicitGCInvokesConcurrent
        -XX:MaxInlineLevel=15 -Djava.awt.headless=true

      # OpenTelemetry configuration
      OTEL_COLLECTOR_HOST: otel-collector
      OTEL_COLLECTOR_PORT_GRPC: 4317
      OTEL_COLLECTOR_PORT_HTTP: 4318
      OTEL_JAVA_AGENT_ENABLED: 'true'
      OTEL_JAVA_AGENT_LOGGING: "application"
      OTEL_JAVA_AGENT_DEBUG: "false"
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
      OTEL_EXPORTER_OTLP_PROTOCOL: grpc
      OTEL_LOGS_EXPORTER: otlp
      OTEL_TRACES_EXPORTER: otlp
      OTEL_METRICS_EXPORTER: otlp
      OTEL_RESOURCE_ATTRIBUTES: service.namespace=kafka-connect,service.instance.id=kafka-connect
      EXTRA_ARGS: >
        -javaagent:/usr/bin/jmx/jmx_prometheus_javaagent.jar=1236:/usr/bin/jmx/exporter.yml
        -javaagent:/usr/bin/otel/opentelemetry-javaagent.jar

  # --------- ksqlDB Server ---------
  ksqldb-server:
    image: confluentinc/cp-ksqldb-server:${CONFLUENT_DOCKER_TAG:-latest}
    container_name: ksqldb-server
    depends_on:
      broker1:
        condition: service_healthy
      init_permissions:
        condition: service_completed_successfully
    ports:
      - "8088:8088"
      - "1238:1238"
    networks:
      - fluxin-network
    healthcheck:
      test: >
        sh -c 'curl --silent --insecure -o /dev/null -w "%{http_code}" http://localhost:8088/ | grep -E "^(200|401)$" > /dev/null'
      start_period: 10s
      interval: 10s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    volumes:
      - ./kafka/keypair:/tmp/conf
    environment:
      KSQL_KSQL_SERVICE_ID: "fluxin-ksql-cluster"
      KSQL_BOOTSTRAP_SERVERS: broker1:9095
      KSQL_HOST_NAME: ksqldb-server
      KSQL_LISTENERS: "http://0.0.0.0:8088"
      KSQL_CACHE_MAX_BYTES_BUFFERING: 0

      # Enable RBAC on ksqlDB server
      KSQL_KSQL_SECURITY_EXTENSION_CLASS: io.confluent.ksql.security.KsqlConfluentSecurityExtension

      # Enable bearer token authentication which allows the identity of the ksqlDB end user to be propagated to Kafka for authorization
      KSQL_KSQL_AUTHENTICATION_PLUGIN_CLASS: io.confluent.ksql.security.VertxAuthenticationHandlerPlugin
      KSQL_PUBLIC_KEY_PATH: /tmp/conf/public.pem
      KSQL_OAUTHBEARER_JWKS_ENDPOINT_URL: ${IDP_JWKS_ENDPOINT}
      KSQL_OAUTHBEARER_EXPECTED_ISSUER: ${IDP_EXPECTED_ISSUER}
      KSQL_OAUTHBEARER_EXPECTED_AUDIENCE: ${EXPECTED_AUDIENCE}
      KSQL_OAUTHBEARER_SUB_CLAIM_NAME: ${SUB_CLAIM_NAME}
      KSQL_OAUTHBEARER_GROUPS_CLAIM_NAME: ${GROUP_CLAIM_NAME}

      # Used by ksqlDB's REST layer to connect to MDS to verify tokens and authenticate clients
      KSQL_CONFLUENT_METADATA_BOOTSTRAP_SERVER_URLS: http://broker1:8091
      KSQL_CONFLUENT_METADATA_HTTP_AUTH_CREDENTIALS_PROVIDER: 'OAUTHBEARER'
      KSQL_CONFLUENT_METADATA_OAUTHBEARER_TOKEN_ENDPOINT_URL: ${IDP_TOKEN_ENDPOINT}
      KSQL_CONFLUENT_METADATA_OAUTHBEARER_LOGIN_CLIENT_ID: ${KSQL_CLIENT_ID}
      KSQL_CONFLUENT_METADATA_OAUTHBEARER_LOGIN_CLIENT_SECRET: ${KSQL_CLIENT_SECRET}

      # ksqlDB to SR on OAuth
      KSQL_KSQL_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      KSQL_KSQL_SCHEMA_REGISTRY_BEARER_AUTH_CREDENTIALS_SOURCE: 'OAUTHBEARER'
      KSQL_KSQL_SCHEMA_REGISTRY_BEARER_AUTH_ISSUER_ENDPOINT_URL: ${IDP_TOKEN_ENDPOINT}
      KSQL_KSQL_SCHEMA_REGISTRY_BEARER_AUTH_CLIENT_ID: ${KSQL_CLIENT_ID}
      KSQL_KSQL_SCHEMA_REGISTRY_BEARER_AUTH_CLIENT_SECRET: ${KSQL_CLIENT_SECRET}
      KSQL_KSQL_SECURITY_EXTENSION_SR___PERMISSIONS_VALIDATOR_ENABLED: false

      # Enable OAuth for ksqlDB's embedded Kafka clients that access and manage consumer groups and topics
      KSQL_SASL_MECHANISM: 'OAUTHBEARER'
      KSQL_SECURITY_PROTOCOL: SASL_PLAINTEXT
      KSQL_SASL_LOGIN_CALLBACK_HANDLER_CLASS: 'org.apache.kafka.common.security.oauthbearer.secured.OAuthBearerLoginCallbackHandler'
      KSQL_SASL_OAUTHBEARER_TOKEN_ENDPOINT_URL: ${IDP_TOKEN_ENDPOINT}
      KSQL_SASL_JAAS_CONFIG: |
        org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \
        clientId="${KSQL_CLIENT_ID}" \
        clientSecret="${KSQL_CLIENT_SECRET}";   

      # Confluent Monitoring Interceptors for Control Center streams monitoring
      KSQL_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      KSQL_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      KSQL_CONFLUENT_MONITORING_INTERCEPTOR_SECURITY_PROTOCOL: SASL_PLAINTEXT
      KSQL_CONFLUENT_MONITORING_INTERCEPTOR_SASL_MECHANISM: OAUTHBEARER
      KSQL_CONFLUENT_MONITORING_INTERCEPTOR_SASL_LOGIN_CALLBACK_HANDLER_CLASS: org.apache.kafka.common.security.oauthbearer.secured.OAuthBearerLoginCallbackHandler
      KSQL_CONFLUENT_MONITORING_INTERCEPTOR_SASL_OAUTHBEARER_TOKEN_ENDPOINT_URL: ${IDP_TOKEN_ENDPOINT}
      KSQL_CONFLUENT_MONITORING_INTERCEPTOR_SASL_JAAS_CONFIG: |
        org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \
              clientId="${KSQL_CLIENT_ID}" \
              clientSecret="${KSQL_CLIENT_SECRET}";

      # For Demo purposes: improve resource utilization and avoid timeouts
      KSQL_KSQL_STREAMS_NUM_STREAM_THREADS: 1
      KSQL_KSQL_STREAMS_REPLICATION_FACTOR: 1
      KSQL_KSQL_INTERNAL_TOPIC_REPLICAS: 1

      KSQL_LOG4J_ROOT_LOGLEVEL: INFO
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_REPLICATION_FACTOR: 1
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: 'true'
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: 'true'

      KSQL_PRODUCER_ENABLE_IDEMPOTENCE: 'true'
      KSQL_OPTS: '-Dconfluent.support.metrics.enable=false'
      CUB_CLASSPATH: '/usr/share/java/confluent-security/ksql/*:/usr/share/java/ksqldb-server/*:/usr/share/java/cp-base-new/*'

  control-center:
    image: confluentinc/cp-enterprise-control-center:${CONFLUENT_DOCKER_TAG:-latest}
    container_name: control-center
    depends_on:
      broker1:
        condition: service_healthy
      init_permissions:
        condition: service_completed_successfully
      prometheus:
        condition: service_healthy
    ports:
      - "9021:9021"
      - "9022:9022"
      - "1237:1237"
    networks:
      - fluxin-network
#    command: >
#      rm -rf /usr/share/java/confluent-control-center/protobuf-java-util-3.24.4.jar &&
#      /etc/confluent/docker/launch;
    healthcheck:
      test: curl --fail --silent http://control-center:9021 --output /dev/null || exit 1
      start_period: 10s
      interval: 10s
      retries: 3
    restart: unless-stopped
    volumes:
      - ./kafka/keypair:/tmp/conf
      - ./kafka/configs:/etc/confluent/configs
      - ./kafka/bin/opentelemetry-javaagent.jar:/usr/bin/otel/opentelemetry-javaagent.jar
      - ./kafka/bin/jmx_prometheus_javaagent.jar:/usr/bin/jmx/jmx_prometheus_javaagent.jar
      - ./kafka/metrics/exporter.yml:/usr/bin/jmx/exporter.yml
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: EXTERNAL://broker1:9095
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_LOG4J_ROOT_LOGLEVEL: INFO
      CONTROL_CENTER_LOG4J_LOGLEVEL: INFO

      CONTROL_CENTER_STREAMS_SECURITY_PROTOCOL: SASL_PLAINTEXT
      CONTROL_CENTER_STREAMS_SASL_MECHANISM: OAUTHBEARER
      CONTROL_CENTER_STREAMS_SASL_LOGIN_CALLBACK_HANDLER_CLASS: org.apache.kafka.common.security.oauthbearer.secured.OAuthBearerLoginCallbackHandler
      CONTROL_CENTER_STREAMS_SASL_OAUTHBEARER_TOKEN_ENDPOINT_URL: ${IDP_TOKEN_ENDPOINT}
      CONTROL_CENTER_STREAMS_SASL_JAAS_CONFIG: |
        org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \
        clientId="${C3_CLIENT_ID}" \
        clientSecret="${C3_CLIENT_SECRET}";

      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_REPLICATION: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_SASL_OAUTHBEARER_TOKEN_ENDPOINT_URL: ${IDP_TOKEN_ENDPOINT}
      CONTROL_CENTER_MONITORING_INTERCEPTOR_SASL_LOGIN_CALLBACK_HANDLER_CLASS: org.apache.kafka.common.security.oauthbearer.secured.OAuthBearerLoginCallbackHandler
      CONTROL_CENTER_MONITORING_INTERCEPTOR_SASL_JASS_CONFIG: |
        org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \
        clientId="${C3_CLIENT_ID}" \
        clientSecret="${C3_CLIENT_SECRET}";

      CONTROL_CENTER_CONFLUENT_CONTROLCENTER_REST_LISTENERS: http://0.0.0.0:9021
      CONTROL_CENTER_CONFLUENT_CONTROLCENTER_REST_ADVERTISED_URL: http://control-center:9021

      CONTROL_CENTER_CONNECT_CONNECT1_CLUSTER: http://connect:8083
      CONTROL_CENTER_CONNECT_CONNECT1_BEARER_AUTH_CREDENTIALS_SOURCE: OAUTHBEARER

      CONTROL_CENTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONTROL_CENTER_SCHEMA_REGISTRY_BEARER_AUTH_CREDENTIALS_SOURCE: OAUTHBEARER

      CONTROL_CENTER_KSQL_KSQLDB_URL: http://ksqldb-server:8088

      CONTROL_CENTER_REST_AUTHENTICATION_METHOD: BEARER
      PUBLIC_KEY_PATH: /tmp/conf/public.pem

      CONFLUENT_METADATA_BOOTSTRAP_SERVER_URLS: http://broker1:8091
      CONFLUENT_METADATA_HTTP_AUTH_CREDENTIALS_PROVIDER: OAUTHBEARER
      CONFLUENT_METADATA_OAUTHBEARER_LOGIN_CREDENTIALS_SOURCE: OAUTHBEARER
      CONFLUENT_METADATA_OAUTHBEARER_LOGIN_CLIENT_ID: ${C3_CLIENT_ID}
      CONFLUENT_METADATA_OAUTHBEARER_LOGIN_CLIENT_SECRET: ${C3_CLIENT_SECRET}
      CONFLUENT_METADATA_OAUTHBEARER_TOKEN_ENDPOINT_URL: ${IDP_TOKEN_ENDPOINT}

      CONTROL_CENTER_AUTH_SSO_MODE: oidc
      CONTROL_CENTER_CONFLUENT_CONTROLCENTER_LICENCE_MANAGER_ENABLE: "false"

      CONTROL_CENTER_STREAMS_CONFLUENT_METADATA_SERVER_URLS_FAIL_ON_401: 'false'
      CONTROL_CENTER_STREAMS_CONFLUENT_METADATA_ENABLE_SERVER_URLS_REFRESH: 'false'

      CONTROL_CENTER_STREAMS_CACHE_MAX_BYTES_BUFFERING: 100000000
      CONTROL_CENTER_STREAMS_CONSUMER_REQUEST_TIMEOUT_MS: "960032"
      CONTROL_CENTER_STREAMS_NUM_STREAM_THREADS: 1

      CONTROL_CENTER_METRICS_TOPIC_REPLICATION: 1
      CONTROL_CENTER_METRICS_TOPIC_PARTITIONS: 1

      CUB_CLASSPATH: '/usr/share/java/confluent-control-center/*:/usr/share/java/rest-utils/*:/usr/share/java/confluent-common/*:/usr/share/java/confluent-security/kafka-rest/*:/usr/share/java/kafka-rest/:/usr/share/java/cp-base-new/*'

      # OpenTelemetry configuration
      OTEL_COLLECTOR_HOST: otel-collector
      OTEL_COLLECTOR_PORT_GRPC: 4317
      OTEL_COLLECTOR_PORT_HTTP: 4318
      OTEL_JAVA_AGENT_ENABLED: 'true'
      OTEL_JAVA_AGENT_LOGGING: "application"
      OTEL_JAVA_AGENT_DEBUG: "false"
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
      OTEL_EXPORTER_OTLP_PROTOCOL: grpc
      OTEL_LOGS_EXPORTER: otlp
      OTEL_TRACES_EXPORTER: otlp
      OTEL_METRICS_EXPORTER: otlp
      OTEL_RESOURCE_ATTRIBUTES: service.namespace=control-center,service.instance.id=control-center
      EXTRA_ARGS: >
        -javaagent:/usr/bin/jmx/jmx_prometheus_javaagent.jar=1237:/usr/bin/jmx/exporter.yml
        -javaagent:/usr/bin/otel/opentelemetry-javaagent.jar

volumes:
  broker1-data:
